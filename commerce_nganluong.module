<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */
module_load_include('php', 'commerce_nganluong', 'nganluong_test');

/**
 * Implements hook_menu().
 */
function commerce_nganluong_menu() {
  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['commerce_nganluong/verify_payment/%commerce_payment_method'] = array(
    'page callback' => 'commerce_nganluong_verify_payment',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['commerce_nganluong/payment_fail'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_nganluong_payment_fail'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Form payment fail
 * 
 * @param array $form
 * @param type $form_state
 * @return string
 */
function commerce_nganluong_payment_fail($form, $form_state){
  $form['message']=array(
    '#markup'=>'<h1>Payment error</h1>'
  );
  
  return $form;
}
/**
 * Verify payment
 */
function commerce_nganluong_verify_payment($payment_method) {
  //Lấy thông tin giao dịch
  $transaction_info = $_GET["transaction_info"];
  //Lấy mã đơn hàng 
  $order_code = $_GET["order_code"];
  $order = commerce_order_load($order_code);
  //Lấy tổng số tiền thanh toán tại ngân lượng 
  $price = $_GET["price"];
  //Lấy mã giao dịch thanh toán tại ngân lượng
  $payment_id = $_GET["payment_id"];
  //Lấy loại giao dịch tại ngân lượng (1=thanh toán ngay ,2=thanh toán tạm giữ)
  $payment_type = $_GET["payment_type"];
  //Lấy thông tin chi tiết về lỗi trong quá trình giao dịch
  $error_text = $_GET["error_text"];
  //Lấy mã kiểm tra tính hợp lệ của đầu vào 
  $secure_code = $_GET["secure_code"];

  //Xử lí đầu vào 

  $nl = new NL_Checkout();
  $check = $nl->verifyPaymentUrl($transaction_info, $order_code, $price, $payment_id, $payment_type, $error_text, $secure_code);
  // nếu thanh toán thành công.
  if ($check) {
    // ghi nhận payment transaction 
    commerce_nganluong_save_payment_trasaction($order, $price, $payment_method, array($payment_id, $payment_type, $error_text, $secure_code));
    // chuyển qua bước kế tiếp
    $return_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
    drupal_goto($return_url);
  } else {
    // chuyển về trang thông báo lỗi
    drupal_goto('commerce_nganluong/payment_fail');
  }
}

/**
 * Lưu payment transaction
 * 
 * @param type $order
 */
function commerce_nganluong_save_payment_trasaction($order, $price, $payment_method, $info) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->value();
  $transaction = commerce_payment_transaction_new('commerce_nganluong', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $info[0];
  $transaction->amount = commerce_currency_decimal_to_amount($price, $order_total['currency_code']);
  $transaction->currency_code = $order_total['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  $transaction->message = 'Payment id: @payment_id; Payment type: @payment_type; Error text: @error_text; Secure code: @secure_code';
  $transaction->message_variables = array(
    '@payment_id' => $info[0],
    '@payment_type' => $info[1],
    '@error_text' => $info[2],
    '@secure_code' => $info[3],
  );
  commerce_payment_transaction_save($transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_nganluong_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_nganluong'] = array(
    'title' => t('NganLuong payment'),
    'description' => t('Complete payment during checkout with NganLuong.'),
    'active' => TRUE,
    'short_title' => t('NganLuong'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_nganluong_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
//  if (empty($payment_method['settings']['business'])) {
//    drupal_set_message(t('PayPal WPS is not configured for use. No PayPal e-mail address has been specified.'), 'error');
//    return array();
//  }
//  $settings = array(
//    // Return to the previous page when payment is canceled
//    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
//    // Return to the payment redirect page for processing successful payments
//    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
//    // Specify the current payment method instance ID in the notify_url
//    'payment_method' => $payment_method['instance_id'],
//  );
//
  $url = commerce_nganluong_build_checkout_url($order);
  $form['#action'] = $url;

//  foreach ($data as $name => $value) {
//    if (!empty($value)) {
//      $form[$name] = array('#type' => 'hidden', '#value' => $value);
//    }
//  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to NganLuong'),
  );
  return $form;

//  return commerce_paypal_wps_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * 
 * @return type
 */
function commerce_nganluong_build_checkout_url($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $receiver = "phuonglh@peacesoft.net"; // Tài khoản email đăng ký trên sandbox
  //Khai báo url trả về 
  $return_url = url('commerce_nganluong/verify_payment/commerce_nganluong', array('absolute' => TRUE));

  //Giá của cả giỏ hàng 
  $order_total = $order_wrapper->commerce_order_total->value();
  $price = commerce_currency_amount_to_decimal($order_total['amount'], $order_total['currency_code']);
  //Mã giỏ hàng 
  $order_code = $order->order_id;
  //Thông tin giao dịch
  $transaction_info = "";
  //Khai báo đối tượng của lớp NL_Checkout
  $nl = new NL_Checkout();
  //Tạo link thanh toán đến nganluong.vn
  $url = $nl->buildCheckoutUrl($return_url, $receiver, $transaction_info, $order_code, $price);
  return $url;
}

/**
 * Payment method callback: submit form.
 */
function commerce_nganluong_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  // @todo: Add some helpful elements 
  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_nganluong_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // @todo: validate submit form
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_nganluong_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_nganluong'] = $pane_values;
  // Generate a payment redirect key.
  $redirect_key = drupal_hash_base64(time());
  $order->data['payment_redirect_key'] = strtolower(urlencode($redirect_key));
  commerce_order_save($order);
}
